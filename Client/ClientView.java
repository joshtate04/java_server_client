
import java.awt.Color;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.ConnectException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



/**
 *
 * @author joshtate
 */
public class ClientView extends javax.swing.JFrame {

    /**
     * Creates new form ClientGUI
     */
    public ClientView() {
        initComponents();
        port_combobox.addItem("");
        port_combobox.addItem("8088");
        port_combobox.addItem("65000");
        port_combobox.addItem("65535");
        conn = new ClientConnection("localhost",8088);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connection_panel = new javax.swing.JPanel();
        host_label = new javax.swing.JLabel();
        port_label = new javax.swing.JLabel();
        host_field = new javax.swing.JTextField();
        connect_button = new javax.swing.JButton();
        port_combobox = new javax.swing.JComboBox();
        command_panel = new javax.swing.JPanel();
        command_field = new javax.swing.JTextField();
        command_button = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        terminal_textarea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(600, 500));

        connection_panel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(12, 12, 12, 12, new java.awt.Color(255, 0, 0)), "SET CONNECTION", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        host_label.setDisplayedMnemonic('h');
        host_label.setLabelFor(host_field);
        host_label.setText("Host:");
        host_label.setMaximumSize(new java.awt.Dimension(40, 40));
        host_label.setMinimumSize(new java.awt.Dimension(40, 40));
        host_label.setPreferredSize(new java.awt.Dimension(40, 40));
        host_label.setSize(new java.awt.Dimension(40, 40));

        port_label.setDisplayedMnemonic('p');
        port_label.setLabelFor(port_combobox);
        port_label.setText("Port:");
        port_label.setMaximumSize(new java.awt.Dimension(40, 40));
        port_label.setMinimumSize(new java.awt.Dimension(40, 40));
        port_label.setPreferredSize(new java.awt.Dimension(40, 40));
        port_label.setSize(new java.awt.Dimension(40, 40));

        host_field.setText("localhost");
        host_field.setMargin(new java.awt.Insets(0, 4, 0, 0));
        host_field.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                host_fieldFocusGained(evt);
            }
        });
        host_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                host_fieldActionPerformed(evt);
            }
        });

        connect_button.setBackground(new java.awt.Color(255, 0, 0));
        connect_button.setMnemonic('c');
        connect_button.setText("Connect");
        connect_button.setOpaque(true);
        connect_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connect_buttonActionPerformed(evt);
            }
        });

        port_combobox.setEditable(true);

        javax.swing.GroupLayout connection_panelLayout = new javax.swing.GroupLayout(connection_panel);
        connection_panel.setLayout(connection_panelLayout);
        connection_panelLayout.setHorizontalGroup(
            connection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connection_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(connection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(connection_panelLayout.createSequentialGroup()
                        .addComponent(port_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(port_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connect_button)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(connection_panelLayout.createSequentialGroup()
                        .addComponent(host_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(host_field)))
                .addContainerGap())
        );

        connection_panelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {connect_button, port_combobox});

        connection_panelLayout.setVerticalGroup(
            connection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, connection_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(connection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(host_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(host_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(port_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connect_button)
                    .addComponent(port_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        connection_panelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {connect_button, port_combobox});

        command_panel.setMaximumSize(new java.awt.Dimension(588, 42));
        command_panel.setMinimumSize(new java.awt.Dimension(588, 42));
        command_panel.setPreferredSize(new java.awt.Dimension(588, 42));

        command_field.setForeground(Color.gray);
        command_field.setText("Type a server request line");
        command_field.setMargin(new java.awt.Insets(0, 4, 0, 0));
        command_field.setMaximumSize(new java.awt.Dimension(470, 28));
        command_field.setPreferredSize(new java.awt.Dimension(470, 28));
        command_field.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                command_fieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                command_fieldFocusLost(evt);
            }
        });
        command_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                command_fieldKeyReleased(evt);
            }
        });

        command_button.setMnemonic('s');
        command_button.setText("Send");
        command_button.setEnabled(false);
        command_button.setPreferredSize(new java.awt.Dimension(100, 29));
        command_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                command_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout command_panelLayout = new javax.swing.GroupLayout(command_panel);
        command_panel.setLayout(command_panelLayout);
        command_panelLayout.setHorizontalGroup(
            command_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(command_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(command_field, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(command_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        command_panelLayout.setVerticalGroup(
            command_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(command_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(command_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(command_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(command_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(12, 12, 12, 12, new java.awt.Color(0, 0, 255)), "TERMINAL", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setToolTipText("");
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setAutoscrolls(true);

        jScrollPane1.setBorder(null);

        terminal_textarea.setEditable(false);
        terminal_textarea.setColumns(20);
        terminal_textarea.setFont(new java.awt.Font("Monaco", 0, 10)); // NOI18N
        terminal_textarea.setLineWrap(true);
        terminal_textarea.setRows(5);
        terminal_textarea.setMinimumSize(new java.awt.Dimension(0, 100));
        terminal_textarea.setPreferredSize(new java.awt.Dimension(240, 110));
        jScrollPane1.setViewportView(terminal_textarea);

        jScrollPane2.setViewportView(jScrollPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(command_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(connection_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(connection_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(command_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void host_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_host_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_host_fieldActionPerformed

    private void connect_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connect_buttonActionPerformed
        String host;
        int port;
        
        terminate(false);
        
        // Set host
        if(host_field.getText().isEmpty())
            host = "localhost";
        else
            host = host_field.getText();
        
        host_field.setText(host);
        
        // Set port
        if(port_combobox.getSelectedItem().toString().isEmpty())
            port = 8088;
        else 
            port = Integer.parseInt(port_combobox.getSelectedItem().toString());
        
        port_combobox.setSelectedItem(String.valueOf(port));
        
        // Initialize socket
        conn = new ClientConnection(host, port);
        t = new Thread(conn);
        t.start();
    }//GEN-LAST:event_connect_buttonActionPerformed

    private void command_fieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_command_fieldFocusLost
        if (command_field.getText().length() < 1){
            command_field.setText("Type a server request line");
            command_field.setForeground(Color.gray);
        }
    }//GEN-LAST:event_command_fieldFocusLost

    private void command_fieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_command_fieldFocusGained
        if (command_field.getText().equals("Type a server request line")){
            command_field.setText("");
            command_field.setForeground(Color.black);
        }
    }//GEN-LAST:event_command_fieldFocusGained

    private void host_fieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_host_fieldFocusGained
        host_field.setCaretPosition(0);
    }//GEN-LAST:event_host_fieldFocusGained

    private void command_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_command_buttonActionPerformed
        if(!command_field.getText().isEmpty() && !command_field.getText().equals("Type a server request line")){
            conn.sendCommand(command_field.getText());
            command_field.setText("Type a server request line");
        }
    }//GEN-LAST:event_command_buttonActionPerformed

    private void command_fieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_command_fieldKeyReleased
        if(evt.getKeyChar() == '\n' && !command_field.getText().isEmpty() && 
                !command_field.getText().equals("Type a server request line") &&
                command_button.isEnabled()) {
            conn.sendCommand(command_field.getText());
            command_field.setText("");            
        }
    }//GEN-LAST:event_command_fieldKeyReleased

    /**
     * Sends termination command to server and closes the connection
     * @param print_to_terminal If true, output will print on the terminal, false will hide output
     */
    public void terminate(boolean print_to_terminal){
        //Check to make sure the client is connected
        if (conn.hasConnection()){
            //Send terminate signal and close connection
            conn.sendCommand("TERMINATE\0");
            conn.closeConnection();
            
            //Display output is enabled
            if(print_to_terminal)
                conn.addToTerminal("CLIENT>Connection closed");
            
            //Interrupt connection thread
            t.interrupt();
        }
        //Disable "Send" button
        command_button.setEnabled(false);
    }
    
    /**
     * The ClientConnection class will handle the communication with the server.
     */
    private class ClientConnection implements Runnable{
        private Socket socket;
        private int port;
        private String host;
        private OutputStream os;
        private InputStream is;
        private boolean has_connection = false;
        
        /**
         * Sets the host and port for the connection with the server.
         * 
         * @author Josh Tate
         * @param host Server hostname
         * @param port Server port number
         */
        public ClientConnection(String host, int port){
            this.port = port;
            this.host = host;
        }
        
        /**
         * Checks if there is a connection.
         * 
         * @return Returns true on active connection, false if server has been disconnected
         */
        public boolean hasConnection(){
            return has_connection;
        }
        
        /**
         * Closes the connection to the server.
         */
        public void closeConnection(){
            try {
                os.close();
                is.close();
                socket.close();
            } catch (IOException | NullPointerException ex) {
            }
        }
        
        
        /**
         * Connects to the server.
         * @return Returns true on successful connection, false on failure
         */
        private boolean connectSocket(){
            try {
                //Create socket and IO streams
                socket = new Socket(host,port);
                os = socket.getOutputStream();
                is = socket.getInputStream();
                return true;
            } catch(ConnectException ex){
                //No server at host and port
                addToTerminal("CLIENT>ERROR: Connection refused: server is not available. Check port or restart server.");
                return false;
            }catch (UnknownHostException ex){
                //No such host available
                addToTerminal("CLIENT>ERROR:Unknown host");
                return false;
            } catch (IOException ex) {
                //Streams failed to open
                addToTerminal("CLIENT>ERROR:Stream error");
                return false;
            } 
        }
        
        public void sendCommand(String command){
            try {
                //Send command through output stream
                os.write((command+"\0").getBytes());
            } catch (IOException ex) {
                //Stream has failed/closed
                
                if(!command.equals("TERMINATE\0")) //Stream failed anyway, only display if not terminating
                    addToTerminal("CLIENT>ERROR SENDING COMMAND: "+command);
            }
        }
        
        @Override
        public void run() {
            boolean running = true;
            
            // Connects to the server and updates GUI
            if (connectSocket()){
                terminal_textarea.setText("Connected to " + socket.toString());
                command_button.setEnabled(true);
                has_connection = true;
            }
            else {
                return;
            }
            
            Scanner sc = new Scanner(is);
            sc.useDelimiter("\0");
            
            // While loop label (to allow breaking from within switch statement)
            OUTER:
            while (running) {
                if (sc.hasNext()) {
                    String response = sc.next();
                    switch (response) {
                        //Terminate connection
                        case "TERMINATE":
                            addToTerminal("SERVER>Connection closed");
                            terminate(true);
                            break OUTER;
                            
                        //Terminate connection after timeout
                        case "TIMEOUT":
                            addToTerminal("SERVER>"+response);
                            terminate(true);
                            break OUTER;
                            
                        //Clear screen
                        case "CLS":
                            terminal_textarea.setText("");
                            break;
                            
                        //All other input to add to terminal text_area
                        default:
                            addToTerminal("SERVER>"+response);
                            break;
                    }
                }
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    terminate(true);
                    break;
                } 
            }
        }
        
        /**
         * Adds a string to the terminal {@link JTextArea}.
         * It will determine if a newline is needed at the beginning of the
         * new string.
         * 
         * @author Josh Tate
         * @param string String to be added to the terminal
         */
        public void addToTerminal(String string){
            if (terminal_textarea.getText().isEmpty())
                terminal_textarea.setText(terminal_textarea.getText() + string);
            else
                terminal_textarea.setText(terminal_textarea.getText() + "\n" + string);
            
            terminal_textarea.setCaretPosition(terminal_textarea.getText().length());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton command_button;
    private javax.swing.JTextField command_field;
    private javax.swing.JPanel command_panel;
    private javax.swing.JButton connect_button;
    private javax.swing.JPanel connection_panel;
    private javax.swing.JTextField host_field;
    private javax.swing.JLabel host_label;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox port_combobox;
    private javax.swing.JLabel port_label;
    private javax.swing.JTextArea terminal_textarea;
    // End of variables declaration//GEN-END:variables
    private ClientConnection conn;
    private Thread t;
}
